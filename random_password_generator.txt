#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

int main() {
    // Character sets .. note --> create library to vary lexicons
    const char *lowercase = "abcdefghijklmnopqrstuvwxyz";
    const char *uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const char *digits = "0123456789";
    const char *special = "!@#$%^&*()_+-=[]{}|;:,.<>?";

    /* User input for password criteria ...note --> should add condition to 1. exclude certain special characters, 2. specify number of upper or lowercase*/
    int length, includeLower, includeUpper, includeDigits, includeSpecial;
    printf("Enter password length: ");
    scanf("%d", &length);
    printf("Include lowercase letters? (1 for yes, 0 for no): ");
    scanf("%d", &includeLower);
    printf("Include uppercase letters? (1 for yes, 0 for no): ");
    scanf("%d", &includeUpper);
    printf("Include digits? (1 for yes, 0 for no): ");
    scanf("%d", &includeDigits);
    printf("Include special characters? (1 for yes, 0 for no): ");
    scanf("%d", &includeSpecial);

    // make sure inputs are valid
    if (!includeLower && !includeUpper && !includeDigits && !includeSpecial) {
        printf("Error: No character types selected.\n");
        return 1; // end program if something got buggered
    }

    // Create combined character set
    char combinedSet[100] = ""; // Adjust size as needed. 
    if (includeLower) strcat(combinedSet, lowercase);
    if (includeUpper) strcat(combinedSet, uppercase);
    if (includeDigits) strcat(combinedSet, digits);
    if (includeSpecial) strcat(combinedSet, special);

    // Seed random number generator
    srand(time(NULL));

    // Dynamically allocate memory for the password
    char *password = (char *)malloc((length + 1) * sizeof(char));
    if (password == NULL) {
        printf("Memory allocation went horribly wrong-FUBAR.\n");
        return 1; // Terminate program
    }

    // Generate password
    for (int i = 0; i < length; i++) {
        int index = rand() % strlen(combinedSet);
        password[i] = combinedSet[index];
    }
    password[length] = '\0'; // Null terminate the string

    // Display the password
    printf("Generated Password: %s\n", password); /* note --> should we ask user for the usecase of this password and save the results to a separate file?*/

    // Free allocated memory, resources.. duh
    free(password);

    return 0;
}
